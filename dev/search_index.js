var documenterSearchIndex = {"docs":
[{"location":"analysis/#Tiny-rate-analysis","page":"Rate analysis","title":"Tiny rate analysis","text":"","category":"section"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"Here is an example of an analysis of branch-specific rates under the birth-death model. We use a State-dependent Speciation Extinction (SSE) model, with a K-sized state space, in order to get at the question of rate heterogeneity across branches. The Binary SSE model (BiSSE) was first introduced to study rate variation in association with trait data, i.e. each species was assigned a state at the tips of the tree. In our approach, however, we don't use trait data, and consider the tip states unknown, and equally probably for all states at the tips. ","category":"page"},{"location":"analysis/#Load-and-read-files","page":"Rate analysis","title":"Load and read files","text":"","category":"section"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"First, we load the necessary modules and read in the tree file.","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"using Distributions\nusing Diversification\n\nphy = readtree(Diversification.path(\"primates.tre\"))\nρ = 0.67\ndata = make_SSEdata2(phy, ρ)","category":"page"},{"location":"analysis/#SSE-model","page":"Rate analysis","title":"SSE model","text":"","category":"section"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"Next, we set up the SSE model, including its dimensionality and hyperparameters. For this model, we will draw the speciation rate (λ) and extinction rate (µ) from LogNormal distributions. We pick the median of the LogNormal distributions such that they correspond to the maximum-likelihood estimates of the constant-rate birth-death model. We pick the variance as H = 0.587, which corresponds to a LogNormal distribution whose 2.5%-97.5% quantile spans one order of magnitude. ","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"λml, μml = estimate_constant_bdp(data)\n\nH = 0.587\nn = 6\n\ndλ = LogNormal(log(λml), H)\ndμ = LogNormal(log(µml), H)\n\nλquantiles = make_quantiles(dλ, n)\nµquantiles = make_quantiles(dμ, n)\nλ, μ = allpairwise(λquantiles, µquantiles)","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"Next, we estimate the rate shift parameter η under the SSE model, conditional on the hyperparameters for λ and µ.","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"η = optimize_eta(λ, µ, data; lower = 0.0001, upper = 0.1)","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"This allows us to set up the SSE model object:","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"model = SSEconstant(λ, μ, η[1])","category":"page"},{"location":"analysis/#Likelihood","page":"Rate analysis","title":"Likelihood","text":"","category":"section"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"With the model and data objects we can for example calculate the loglikelihood","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"logL_root(model, data)","category":"page"},{"location":"analysis/#Branch-likelihoods","page":"Rate analysis","title":"Branch likelihoods","text":"","category":"section"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"Or we can compute both the postorder and preorder pass, and get the expected speciation and extinction rates per branch:","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"res = bds(model,data)","category":"page"},{"location":"analysis/#Plot-using-R-and-ggtree","page":"Rate analysis","title":"Plot using R and ggtree","text":"","category":"section"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"If we want to plot the results, we can use the module RCall. ","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"using RCall\n\nphy = res.phy\nlambda = res.lambda\nmu = res.mu","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"Julia objects can be exported to an R session using the macro @rput, (and retrieved from R with @rget). ","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"@rput phy\n@rput lambda\n@rput mu","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"R code can be called by prefixing a string with R, e.g. R\"print()\", or multiline R\"\"\"...\"\"\". You can also enter the R session interactively through the Julia REPL by entering the character $. Here we plot the phylogeny using some R-packages that we load first.","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"R\"\"\"\nlibrary(ape)\nlibrary(tidytree)\nlibrary(tibble)\nlibrary(ggtree)\nclass(phy) <- \"phylo\"\nth <- max(node.depth.edgelength(phy))\nlambda_average <- lambda\n\ndf <- tibble(\"node\" = 1:max(phy$edge),\n            \"speciation rate\" = lambda_average,\n            \"netdiv\" = lambda - mu)\nx <- as_tibble(phy)\nphydf <- merge(x, df, by = \"node\")\n\ntd_phy <- as.treedata(phydf)\n\np <- ggtree(td_phy, ggplot2::aes(color = `speciation rate`))\nplot(p)\n\"\"\"","category":"page"},{"location":"analysis/","page":"Rate analysis","title":"Rate analysis","text":"(Image: primatestree)","category":"page"},{"location":"install/#Installation-instructions","page":"Installation","title":"Installation instructions","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"We have not yet registered the module with the Julia package manager, meaning it has to be installed using a git repository URL. This can be done in the REPL as follows:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"using Pkg\n\nPkg.add(PackageSpec(url=\"https://github.com/kopperud/Diversification.jl.git\"))","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Even though the module is not registered, the package manager (Pkg) will automatically resolve and install any necessary dependencies. Loading the module is done as follows:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"using Diversification","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Since Julia is a JIT (just-in-time) compiled language, any code must be compiled before it can be run, including modules. To save some time, there is also a pre-compiling step the first time a module is loaded. This means we have to wait a short while. Once the module is finished pre-compiling, you are now ready!","category":"page"},{"location":"#Diversification.jl-Documentation","page":"Diversification.jl Documentation","title":"Diversification.jl Documentation","text":"","category":"section"},{"location":"","page":"Diversification.jl Documentation","title":"Diversification.jl Documentation","text":"lorem ipsum","category":"page"},{"location":"","page":"Diversification.jl Documentation","title":"Diversification.jl Documentation","text":"plottree(x)","category":"page"},{"location":"#Diversification.plottree-Tuple{Any}","page":"Diversification.jl Documentation","title":"Diversification.plottree","text":"plottree(x)\n\nExample:\n\nres = bds(model, data)\nplottree(res)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Diversification.jl Documentation","title":"Diversification.jl Documentation","text":"birth_death_shift(model, data)","category":"page"},{"location":"#Diversification.birth_death_shift-Tuple{Any, Any}","page":"Diversification.jl Documentation","title":"Diversification.birth_death_shift","text":"birth_death_shift(model, data[; verbose = false])\n\nCalculates average branch rates under the birth-death-shift model with a finite state space.\n\nExample:\n\nusing Diversification\n\nphy = readtree(Diversification.path(\"bears.tre\")) \nρ = 1.0  \ndata = make_SSEdata(phy, \"\", ρ; include_traits = false) \nλ = [0.1, 0.2] \nμ = [0.05, 0.15] \n\nη = 0.05 \nmodel = SSEconstant(λ, μ, η)\n\nres = birth_death_shift(model, data)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Diversification.jl Documentation","title":"Diversification.jl Documentation","text":"Econstant(t, λ, µ, ρ)","category":"page"},{"location":"#Diversification.Econstant-NTuple{4, Any}","page":"Diversification.jl Documentation","title":"Diversification.Econstant","text":"from Morlon et al. 2011 [PNAS], eq. S4\n\nE(t) = 1 - fracexp(t(lambda - mu))frac1rho + fraclambdalambda -mu Big ( exp((lambda - mu)t) - 1 Big)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Diversification.jl Documentation","title":"Diversification.jl Documentation","text":"ψ(t, λ, µ, ρ)","category":"page"},{"location":"#Diversification.ψ-NTuple{4, Any}","page":"Diversification.jl Documentation","title":"Diversification.ψ","text":"Equation S5 in Morlon et al. 2011 [PNAS]\n\npsi(s t) = e^(lambda - mu)(t - s)  1 + fracfraclambdalambda - mu(e^t(lambda - mu) - e^s(lambda-mu))frac1rho + fraclambdalambda - mu times (e^s(lambda-mu)-1)^-2\n\nWe use this one, simplified where s = 0\n\npsi(t) = frace^t(lambda - mu)  1 + fracrho lambdalambda - mu(e^t(lambda - mu) - 1)^2\n\nExample:\n\nρ = 1.0\nλ = 1.0\nμ = 0.5\nt = 0.1\n\nψ(t, λ, μ, ρ)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Diversification.jl Documentation","title":"Diversification.jl Documentation","text":"lp(λ, μ, data::SSEdata)","category":"page"},{"location":"#Diversification.lp-Tuple{Any, Any, SSEdata}","page":"Diversification.jl Documentation","title":"Diversification.lp","text":"lp(λ, μ, data)\n\nFrom Louca and Pennell 2020 (Nature), eq. S28\n\nL = fracrho^n+1 lambda (1 - E(t_1))^2 times prod_i=1^n lambda times psi(0 t_i) \nE(t) = 1 - fracexp(lambda - mu)tfrac1rho + fraclambdalambda -mu Big ( exp((lambda - mu)t) - 1 Big) \npsi(t) = frace^t(lambda - mu)  1 + fracrho lambdalambda - mu(e^t(lambda - mu) - 1)^2\n\nLogged:\n\nlog(L) = (n+1) log(rho) + log(psi(t_1)) - log(lambda) - 2 log(1 - E(t_1)) + sum_i=1^n log(lambda) + log(psi(t_i))\n\nExample:\n\nλ = 1.0\nμ = 0.5\n\nphy = readtrees(Diversification.path(\"bears.tre\"))\nρ = 1.0\ndata = make_SSEdata2(phy, ρ)\n\nlp(λ, μ, data)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Diversification.jl Documentation","title":"Diversification.jl Documentation","text":"estimate_constant_bdp(data::SSEdata)","category":"page"},{"location":"#Diversification.estimate_constant_bdp-Tuple{SSEdata}","page":"Diversification.jl Documentation","title":"Diversification.estimate_constant_bdp","text":"estimate_constant_bdp(data::SSEdata[; xinit = [0.11, 0.09], lower = [0.0001, 0.0001], upper = [20.0, 20.0]])\n\nEstimates the speciation and extinction rate under the reconstructed birth-death process with time-homogeneous rates.\n\nExample:\n\nphy = readtree(Diversification.path(\"primates.tre\"))\nρ = 0.67\ndata = make_SSEdata2(phy, ρ)\n\nλml, μml = estimate_constant_bdp(data)\n\n\n\n\n\n","category":"method"}]
}
